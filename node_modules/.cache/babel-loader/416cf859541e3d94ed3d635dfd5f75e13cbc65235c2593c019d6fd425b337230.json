{"ast":null,"code":"export const baseApiUrl = \"https://api.spotify.com\";\nexport const tokenUrl = \"https://accounts.spotify.com/api/token\";\nexport const clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nexport const clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nexport const redirectUri = 'http://localhost:3000';\nexport function generateRandomString(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nexport async function generateCodeChallenge(codeVerifier) {\n  function base64encode(string) {\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(string))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  const encoder = new TextEncoder();\n  const data = encoder.encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return base64encode(digest);\n}\nexport async function authorize() {\n  let codeVerifier = generateRandomString(128);\n  generateCodeChallenge(codeVerifier).then(codeChallenge => {\n    let state = generateRandomString(16);\n    let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n    localStorage.setItem('code_verifier', codeVerifier);\n    let args = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      scope: scope,\n      redirect_uri: redirectUri,\n      state: state,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge\n    });\n    window.location = 'https://accounts.spotify.com/authorize?' + args;\n  });\n}\nexport function checkAuthCode() {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.has('code');\n}\nexport async function getAuthCode() {\n  const urlParams = new URLSearchParams(window.location.search);\n  if (urlParams.has('code')) return urlParams.get('code');else authorize();\n}\nexport function checkAccessToken() {\n  if (localStorage.getItem(\"tokenDetails\")) return true;else return false;\n}\nexport async function getNewAccessToken() {\n  let authCode, codeVerifier;\n  authCode = await getAuthCode();\n  console.log(authCode);\n  let i = 0;\n  codeVerifier = localStorage.getItem('code_verifier');\n  let body = new URLSearchParams({\n    grant_type: 'authorization_code',\n    code: authCode,\n    redirect_uri: redirectUri,\n    client_id: clientId,\n    code_verifier: codeVerifier\n  });\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: body\n  });\n  console.log(response);\n  return;\n  if (!response.ok) {\n    switch (response.status) {\n      case 400:\n        authorize();\n    }\n  }\n  const data = await response.json();\n  runAccessTokenTimer(data.expires_in);\n  localStorage.setItem('tokenDetails', JSON.stringify(data));\n  return data;\n}\nexport async function getAccessToken() {\n  let tokenDetails = localStorage.getItem('tokenDetails');\n  if (!tokenDetails) {\n    tokenDetails = await getNewAccessToken();\n  }\n  tokenDetails = JSON.parse(tokenDetails);\n  return tokenDetails.access_token;\n}\nexport async function login() {\n  let authCode = await getAuthCode();\n  let accessToken = await getNewAccessToken();\n}\nexport async function runAccessTokenTimer(timer) {\n  setTimeout(() => {\n    localStorage.removeItem('tokenDetails');\n    console.log(\"Removed access token\");\n  }, timer * 1000);\n}\nexport function isLoggedIn() {\n  return checkAccessToken();\n}","map":{"version":3,"names":["baseApiUrl","tokenUrl","clientId","clientSecret","redirectUri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","generateCodeChallenge","codeVerifier","base64encode","string","btoa","String","fromCharCode","apply","Uint8Array","replace","encoder","TextEncoder","data","encode","digest","window","crypto","subtle","authorize","then","codeChallenge","state","scope","localStorage","setItem","args","URLSearchParams","response_type","client_id","redirect_uri","code_challenge_method","code_challenge","location","checkAuthCode","urlParams","search","has","getAuthCode","get","checkAccessToken","getItem","getNewAccessToken","authCode","console","log","body","grant_type","code","code_verifier","response","fetch","method","headers","ok","status","json","runAccessTokenTimer","expires_in","JSON","stringify","getAccessToken","tokenDetails","parse","access_token","login","accessToken","timer","setTimeout","removeItem","isLoggedIn"],"sources":["/home/linkachu/jammming/src/AuthActions.js"],"sourcesContent":["export const baseApiUrl = \"https://api.spotify.com\";\nexport const tokenUrl = \"https://accounts.spotify.com/api/token\";\nexport const clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nexport const clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nexport const redirectUri = 'http://localhost:3000';\n\nexport function generateRandomString(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    \n    for (let i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nexport async function generateCodeChallenge(codeVerifier) {\n    function base64encode(string) {\n        return btoa(String.fromCharCode.apply(null, new Uint8Array(string)))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n    }\n    \n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    \n    return base64encode(digest);\n}\n\nexport async function authorize(){\n    let codeVerifier = generateRandomString(128);\n    \n    generateCodeChallenge(codeVerifier).then(codeChallenge => {\n        let state = generateRandomString(16);\n        let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n        \n        localStorage.setItem('code_verifier', codeVerifier);\n        \n        let args = new URLSearchParams({\n            response_type: 'code',\n            client_id: clientId,\n            scope: scope,\n            redirect_uri: redirectUri,\n            state: state,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge\n        });\n        \n        window.location = 'https://accounts.spotify.com/authorize?' + args;\n    });\n}\n\nexport function checkAuthCode(){\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    return urlParams.has('code');\n}\n\nexport async function getAuthCode(){\n    const urlParams = new URLSearchParams(window.location.search);\n\n    if (urlParams.has('code'))\n        return urlParams.get('code');\n    else\n        authorize();\n}\n\nexport function checkAccessToken(){\n    if(localStorage.getItem(\"tokenDetails\"))\n        return true;\n    else\n        return false;\n}\n\nexport async function getNewAccessToken(){\n    let authCode, codeVerifier;\n\n    authCode = await getAuthCode();\n    \n    console.log(authCode);\n\n    let i = 0\n    codeVerifier = localStorage.getItem('code_verifier');\n    \n    let body = new URLSearchParams({\n        grant_type: 'authorization_code',\n        code: authCode,\n        redirect_uri: redirectUri,\n        client_id: clientId,\n        code_verifier: codeVerifier\n    });\n    \n    \n    const response = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: body\n    })\n\n    console.log(response);\n    \n    return;\n    \n    if (!response.ok){\n        switch(response.status){\n            case 400:\n                authorize();\n        }\n    }    \n        \n    const data = await response.json();\n    runAccessTokenTimer(data.expires_in);\n    \n    localStorage.setItem('tokenDetails', JSON.stringify(data));\n\n    return data;\n}\n\nexport async function getAccessToken(){\n    let tokenDetails = localStorage.getItem('tokenDetails');\n    \n    if(!tokenDetails){\n        tokenDetails = await getNewAccessToken();\n    }\n    \n    tokenDetails = JSON.parse(tokenDetails);\n    return tokenDetails.access_token;\n}\n\nexport async function login(){\n    let authCode = await getAuthCode();\n    let accessToken = await getNewAccessToken();\n}\n\nexport async function runAccessTokenTimer(timer){\n    setTimeout(() => {\n        localStorage.removeItem('tokenDetails');\n        console.log(\"Removed access token\");\n    }, timer * 1000);\n}\n\nexport function isLoggedIn(){\n    return checkAccessToken();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}