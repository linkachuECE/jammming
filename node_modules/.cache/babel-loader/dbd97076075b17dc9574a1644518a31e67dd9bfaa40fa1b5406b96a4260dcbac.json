{"ast":null,"code":"import axios from \"axios\";\nconst baseApiUrl = \"https://api.spotify.com\";\nconst tokenUrl = \"https://accounts.spotify.com/api/token\";\nconst clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nconst clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nconst redirectUri = 'http://localhost:3000';\nasync function requestAccessToken() {\n  let authCode, codeVerifier;\n  let i = 0;\n  while (i++ < 10) {\n    authCode = getAuthCode();\n    codeVerifier = localStorage.getItem('code_verifier');\n    if (!authCode) {\n      authorize();\n      continue;\n    }\n    let body = new URLSearchParams({\n      grant_type: 'authorization_code',\n      code: authCode,\n      redirect_uri: redirectUri,\n      client_id: clientId,\n      code_verifier: codeVerifier\n    });\n    response = await fetch(tokenUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: body\n    });\n    if (!response.ok) {}\n    let data = await response.json();\n    localStorage.setItem('accessToken', data.access_token);\n    break;\n  }\n}\nfunction generateRandomString(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nasync function generateCodeChallenge(codeVerifier) {\n  function base64encode(string) {\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(string))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  const encoder = new TextEncoder();\n  const data = encoder.encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return base64encode(digest);\n}\nasync function authorize() {\n  let codeVerifier = generateRandomString(128);\n  generateCodeChallenge(codeVerifier).then(codeChallenge => {\n    let state = generateRandomString(16);\n    let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n    localStorage.setItem('code_verifier', codeVerifier);\n    let args = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      scope: scope,\n      redirect_uri: redirectUri,\n      state: state,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge\n    });\n    window.location = 'https://accounts.spotify.com/authorize?' + args;\n  });\n}\nfunction getAuthCode() {\n  const urlParams = new URLSearchParams(window.location.search);\n  if (urlParams.has('code')) return urlParams.get('code');else return \"\";\n}\nasync function getArtist(artistID) {\n  const accessToken = localStorage.getItem('accessToken');\n  const baseUrl = baseApiUrl + \"/v1/artists\";\n  let response = await fetch(`${baseUrl}/${artistID}`, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  response = await response.json();\n}\nasync function getSearchResults(searchQuery) {\n  const baseUrl = baseApiUrl + \"/v1/search\";\n  let queryString = new URLSearchParams({\n    q: searchQuery,\n    type: [\"track\"]\n  });\n  if (!localStorage.getItem(\"accessToken\")) await requestAccessToken();\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let i = 0;\n  while (i++ < 10) {\n    let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n      headers: {\n        Authorization: `Bearer  ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      console.log(response.status == 401);\n      if (response.status == 401) await requestAccessToken();\n    } else {\n      let data = await response.json();\n      return data.tracks.items;\n    }\n  }\n}\nasync function getUserInfo() {\n  const baseUrl = baseApiUrl + \"/v1/me\";\n  if (!localStorage.getItem(\"accessToken\")) await requestAccessToken();\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let response = await fetch(baseUrl, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  while (true) {\n    if (!response.ok && response.status == 401) {\n      await requestAccessToken();\n    }\n    let data = await response.json();\n    localStorage.setItem(\"userId\", data.id);\n    return data;\n  }\n}\nasync function createPlaylist(title) {\n  if (!localStorage.getItem(\"userId\")) await getUserInfo();\n  const userId = localStorage.getItem(\"userId\");\n  const baseUrl = `${baseApiUrl}/v1/users/${userId}/playlists`;\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let body = {\n    name: title\n  };\n  let response = await fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer  ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  let data = await response.json();\n  return data;\n}\nasync function addToPlaylist(playlistId, tracks) {\n  if (!tracks) return;\n  const baseUrl = `${baseApiUrl}/v1/playlists/${playlistId}/tracks`;\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let body = {\n    uris: tracks.map(track => track.uri)\n  };\n  let response = await fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer  ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  let data = await response.json();\n  return data;\n}\nexport { requestAccessToken, getSearchResults, getArtist, authorize, getAuthCode, getUserInfo, createPlaylist, addToPlaylist };","map":{"version":3,"names":["axios","baseApiUrl","tokenUrl","clientId","clientSecret","redirectUri","requestAccessToken","authCode","codeVerifier","i","getAuthCode","localStorage","getItem","authorize","body","URLSearchParams","grant_type","code","redirect_uri","client_id","code_verifier","response","fetch","method","headers","ok","data","json","setItem","access_token","generateRandomString","length","text","possible","charAt","Math","floor","random","generateCodeChallenge","base64encode","string","btoa","String","fromCharCode","apply","Uint8Array","replace","encoder","TextEncoder","encode","digest","window","crypto","subtle","then","codeChallenge","state","scope","args","response_type","code_challenge_method","code_challenge","location","urlParams","search","has","get","getArtist","artistID","accessToken","baseUrl","Authorization","getSearchResults","searchQuery","queryString","q","type","toString","console","log","status","tracks","items","getUserInfo","id","createPlaylist","title","userId","name","JSON","stringify","addToPlaylist","playlistId","uris","map","track","uri"],"sources":["/home/linkachu/jammming/src/Spotify.js"],"sourcesContent":["import axios from \"axios\";\n\nconst baseApiUrl = \"https://api.spotify.com\";\nconst tokenUrl = \"https://accounts.spotify.com/api/token\";\nconst clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nconst clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nconst redirectUri = 'http://localhost:3000';\n\nasync function requestAccessToken(){\n    let authCode, codeVerifier;\n    \n    let i = 0\n    while(i++ < 10){   \n        authCode = getAuthCode();\n        codeVerifier = localStorage.getItem('code_verifier');\n        \n        if(!authCode){\n            authorize();\n            continue;\n        }\n\n        let body = new URLSearchParams({\n            grant_type: 'authorization_code',\n            code: authCode,\n            redirect_uri: redirectUri,\n            client_id: clientId,\n            code_verifier: codeVerifier\n        });\n        \n        response = await fetch(tokenUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: body\n        })\n\n        if (!response.ok){\n\n        }           \n        \n        let data = await response.json();\n        localStorage.setItem('accessToken', data.access_token);\n        \n        break;\n    }\n}\n\nfunction generateRandomString(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  \n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n    function base64encode(string) {\n      return btoa(String.fromCharCode.apply(null, new Uint8Array(string)))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n    }\n  \n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n  \n    return base64encode(digest);\n}\n\nasync function authorize(){\n    let codeVerifier = generateRandomString(128);\n    \n    generateCodeChallenge(codeVerifier).then(codeChallenge => {\n        let state = generateRandomString(16);\n        let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n\n        localStorage.setItem('code_verifier', codeVerifier);\n\n        let args = new URLSearchParams({\n            response_type: 'code',\n            client_id: clientId,\n            scope: scope,\n            redirect_uri: redirectUri,\n            state: state,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge\n        });\n\n        window.location = 'https://accounts.spotify.com/authorize?' + args;\n    });\n}\n\nfunction getAuthCode(){\n    const urlParams = new URLSearchParams(window.location.search);\n\n    if (urlParams.has('code'))\n        return urlParams.get('code')\n    else\n        return \"\";\n}\n\nasync function getArtist(artistID){\n    const accessToken = localStorage.getItem('accessToken')\n    const baseUrl = baseApiUrl + \"/v1/artists\";\n\n    let response = await fetch(`${baseUrl}/${artistID}`, {\n        headers: {\n            Authorization: `Bearer  ${accessToken}`\n        }\n    });\n    response = await response.json();\n}\n\nasync function getSearchResults(searchQuery){\n    const baseUrl = baseApiUrl + \"/v1/search\";\n\n    let queryString = new URLSearchParams({\n        q: searchQuery,\n        type: [\n            \"track\"\n        ]\n    })\n\n    if (!localStorage.getItem(\"accessToken\"))\n        await requestAccessToken();\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let i = 0\n    while (i++ < 10){\n        let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n            headers: {\n                Authorization: `Bearer  ${accessToken}`\n            }\n        });\n\n        if(!response.ok){\n            console.log(response.status == 401);\n            if(response.status == 401)\n                await requestAccessToken();\n        } else {\n            let data = await response.json();\n            return data.tracks.items;\n        }\n    }\n}\n\nasync function getUserInfo(){\n    const baseUrl = baseApiUrl + \"/v1/me\";\n\n    if (!localStorage.getItem(\"accessToken\"))\n        await requestAccessToken();\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n    \n    let response = await fetch(baseUrl, {\n        headers: {\n          Authorization: `Bearer  ${accessToken}`\n        }\n    });\n\n    while (true){\n        if(!response.ok && response.status == 401){\n            await requestAccessToken();\n\n        }\n        \n        let data = await response.json();\n        \n        localStorage.setItem(\"userId\", data.id)\n        \n        return data;\n    }\n}\n\n\n\nasync function createPlaylist(title){\n    if(!localStorage.getItem(\"userId\"))\n        await getUserInfo();\n\n    const userId = localStorage.getItem(\"userId\");\n    const baseUrl = `${baseApiUrl}/v1/users/${userId}/playlists`;\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let body = {\n        name: title\n    };\n\n    let response = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer  ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n\n    let data = await response.json();\n\n    return data;\n}\n\nasync function addToPlaylist(playlistId, tracks){\n    if(!tracks)\n        return;\n\n    const baseUrl = `${baseApiUrl}/v1/playlists/${playlistId}/tracks`;\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let body = {\n        uris: tracks.map((track) => track.uri)\n    };\n\n    let response = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer  ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n\n    let data = await response.json();\n\n    return data;\n}\n\nexport {requestAccessToken, getSearchResults, getArtist, authorize, getAuthCode, getUserInfo, createPlaylist, addToPlaylist};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAG,yBAAyB;AAC5C,MAAMC,QAAQ,GAAG,wCAAwC;AACzD,MAAMC,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,YAAY,GAAG,kCAAkC;AACvD,MAAMC,WAAW,GAAG,uBAAuB;AAE3C,eAAeC,kBAAkBA,CAAA,EAAE;EAC/B,IAAIC,QAAQ,EAAEC,YAAY;EAE1B,IAAIC,CAAC,GAAG,CAAC;EACT,OAAMA,CAAC,EAAE,GAAG,EAAE,EAAC;IACXF,QAAQ,GAAGG,WAAW,CAAC,CAAC;IACxBF,YAAY,GAAGG,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAEpD,IAAG,CAACL,QAAQ,EAAC;MACTM,SAAS,CAAC,CAAC;MACX;IACJ;IAEA,IAAIC,IAAI,GAAG,IAAIC,eAAe,CAAC;MAC3BC,UAAU,EAAE,oBAAoB;MAChCC,IAAI,EAAEV,QAAQ;MACdW,YAAY,EAAEb,WAAW;MACzBc,SAAS,EAAEhB,QAAQ;MACnBiB,aAAa,EAAEZ;IACnB,CAAC,CAAC;IAEFa,QAAQ,GAAG,MAAMC,KAAK,CAACpB,QAAQ,EAAE;MAC7BqB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDV,IAAI,EAAEA;IACV,CAAC,CAAC;IAEF,IAAI,CAACO,QAAQ,CAACI,EAAE,EAAC,CAEjB;IAEA,IAAIC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAChChB,YAAY,CAACiB,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,YAAY,CAAC;IAEtD;EACJ;AACJ;AAEA,SAASC,oBAAoBA,CAACC,MAAM,EAAE;EAClC,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIC,QAAQ,GAAG,gEAAgE;EAE/E,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,MAAM,EAAEtB,CAAC,EAAE,EAAE;IAC/BuB,IAAI,IAAIC,QAAQ,CAACC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,QAAQ,CAACF,MAAM,CAAC,CAAC;EACtE;EACA,OAAOC,IAAI;AACf;AAEA,eAAeM,qBAAqBA,CAAC9B,YAAY,EAAE;EAC/C,SAAS+B,YAAYA,CAACC,MAAM,EAAE;IAC5B,OAAOC,IAAI,CAACC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAIC,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC,CACjEM,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACvB;EAEA,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;EACjC,MAAMtB,IAAI,GAAGqB,OAAO,CAACE,MAAM,CAACzC,YAAY,CAAC;EACzC,MAAM0C,MAAM,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACH,MAAM,CAAC,SAAS,EAAExB,IAAI,CAAC;EAEjE,OAAOa,YAAY,CAACW,MAAM,CAAC;AAC/B;AAEA,eAAerC,SAASA,CAAA,EAAE;EACtB,IAAIL,YAAY,GAAGsB,oBAAoB,CAAC,GAAG,CAAC;EAE5CQ,qBAAqB,CAAC9B,YAAY,CAAC,CAAC8C,IAAI,CAACC,aAAa,IAAI;IACtD,IAAIC,KAAK,GAAG1B,oBAAoB,CAAC,EAAE,CAAC;IACpC,IAAI2B,KAAK,GAAG,kFAAkF;IAE9F9C,YAAY,CAACiB,OAAO,CAAC,eAAe,EAAEpB,YAAY,CAAC;IAEnD,IAAIkD,IAAI,GAAG,IAAI3C,eAAe,CAAC;MAC3B4C,aAAa,EAAE,MAAM;MACrBxC,SAAS,EAAEhB,QAAQ;MACnBsD,KAAK,EAAEA,KAAK;MACZvC,YAAY,EAAEb,WAAW;MACzBmD,KAAK,EAAEA,KAAK;MACZI,qBAAqB,EAAE,MAAM;MAC7BC,cAAc,EAAEN;IACpB,CAAC,CAAC;IAEFJ,MAAM,CAACW,QAAQ,GAAG,yCAAyC,GAAGJ,IAAI;EACtE,CAAC,CAAC;AACN;AAEA,SAAShD,WAAWA,CAAA,EAAE;EAClB,MAAMqD,SAAS,GAAG,IAAIhD,eAAe,CAACoC,MAAM,CAACW,QAAQ,CAACE,MAAM,CAAC;EAE7D,IAAID,SAAS,CAACE,GAAG,CAAC,MAAM,CAAC,EACrB,OAAOF,SAAS,CAACG,GAAG,CAAC,MAAM,CAAC,MAE5B,OAAO,EAAE;AACjB;AAEA,eAAeC,SAASA,CAACC,QAAQ,EAAC;EAC9B,MAAMC,WAAW,GAAG1D,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,MAAM0D,OAAO,GAAGrE,UAAU,GAAG,aAAa;EAE1C,IAAIoB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEgD,OAAQ,IAAGF,QAAS,EAAC,EAAE;IACjD5C,OAAO,EAAE;MACL+C,aAAa,EAAG,WAAUF,WAAY;IAC1C;EACJ,CAAC,CAAC;EACFhD,QAAQ,GAAG,MAAMA,QAAQ,CAACM,IAAI,CAAC,CAAC;AACpC;AAEA,eAAe6C,gBAAgBA,CAACC,WAAW,EAAC;EACxC,MAAMH,OAAO,GAAGrE,UAAU,GAAG,YAAY;EAEzC,IAAIyE,WAAW,GAAG,IAAI3D,eAAe,CAAC;IAClC4D,CAAC,EAAEF,WAAW;IACdG,IAAI,EAAE,CACF,OAAO;EAEf,CAAC,CAAC;EAEF,IAAI,CAACjE,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EACpC,MAAMN,kBAAkB,CAAC,CAAC;EAE9B,MAAM+D,WAAW,GAAG1D,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAIH,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,EAAE,GAAG,EAAE,EAAC;IACZ,IAAIY,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEgD,OAAQ,IAAGI,WAAW,CAACG,QAAQ,CAAC,CAAE,EAAC,EAAE;MAC/DrD,OAAO,EAAE;QACL+C,aAAa,EAAG,WAAUF,WAAY;MAC1C;IACJ,CAAC,CAAC;IAEF,IAAG,CAAChD,QAAQ,CAACI,EAAE,EAAC;MACZqD,OAAO,CAACC,GAAG,CAAC1D,QAAQ,CAAC2D,MAAM,IAAI,GAAG,CAAC;MACnC,IAAG3D,QAAQ,CAAC2D,MAAM,IAAI,GAAG,EACrB,MAAM1E,kBAAkB,CAAC,CAAC;IAClC,CAAC,MAAM;MACH,IAAIoB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAChC,OAAOD,IAAI,CAACuD,MAAM,CAACC,KAAK;IAC5B;EACJ;AACJ;AAEA,eAAeC,WAAWA,CAAA,EAAE;EACxB,MAAMb,OAAO,GAAGrE,UAAU,GAAG,QAAQ;EAErC,IAAI,CAACU,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EACpC,MAAMN,kBAAkB,CAAC,CAAC;EAE9B,MAAM+D,WAAW,GAAG1D,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAIS,QAAQ,GAAG,MAAMC,KAAK,CAACgD,OAAO,EAAE;IAChC9C,OAAO,EAAE;MACP+C,aAAa,EAAG,WAAUF,WAAY;IACxC;EACJ,CAAC,CAAC;EAEF,OAAO,IAAI,EAAC;IACR,IAAG,CAAChD,QAAQ,CAACI,EAAE,IAAIJ,QAAQ,CAAC2D,MAAM,IAAI,GAAG,EAAC;MACtC,MAAM1E,kBAAkB,CAAC,CAAC;IAE9B;IAEA,IAAIoB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAEhChB,YAAY,CAACiB,OAAO,CAAC,QAAQ,EAAEF,IAAI,CAAC0D,EAAE,CAAC;IAEvC,OAAO1D,IAAI;EACf;AACJ;AAIA,eAAe2D,cAAcA,CAACC,KAAK,EAAC;EAChC,IAAG,CAAC3E,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAC9B,MAAMuE,WAAW,CAAC,CAAC;EAEvB,MAAMI,MAAM,GAAG5E,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,MAAM0D,OAAO,GAAI,GAAErE,UAAW,aAAYsF,MAAO,YAAW;EAE5D,MAAMlB,WAAW,GAAG1D,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAIE,IAAI,GAAG;IACP0E,IAAI,EAAEF;EACV,CAAC;EAED,IAAIjE,QAAQ,GAAG,MAAMC,KAAK,CAACgD,OAAO,EAAE;IAChC/C,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP+C,aAAa,EAAG,WAAUF,WAAY,EAAC;MACvC,cAAc,EAAE;IAClB,CAAC;IACDvD,IAAI,EAAE2E,IAAI,CAACC,SAAS,CAAC5E,IAAI;EAC7B,CAAC,CAAC;EAEF,IAAIY,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAEhC,OAAOD,IAAI;AACf;AAEA,eAAeiE,aAAaA,CAACC,UAAU,EAAEX,MAAM,EAAC;EAC5C,IAAG,CAACA,MAAM,EACN;EAEJ,MAAMX,OAAO,GAAI,GAAErE,UAAW,iBAAgB2F,UAAW,SAAQ;EAEjE,MAAMvB,WAAW,GAAG1D,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAIE,IAAI,GAAG;IACP+E,IAAI,EAAEZ,MAAM,CAACa,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,GAAG;EACzC,CAAC;EAED,IAAI3E,QAAQ,GAAG,MAAMC,KAAK,CAACgD,OAAO,EAAE;IAChC/C,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP+C,aAAa,EAAG,WAAUF,WAAY,EAAC;MACvC,cAAc,EAAE;IAClB,CAAC;IACDvD,IAAI,EAAE2E,IAAI,CAACC,SAAS,CAAC5E,IAAI;EAC7B,CAAC,CAAC;EAEF,IAAIY,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAEhC,OAAOD,IAAI;AACf;AAEA,SAAQpB,kBAAkB,EAAEkE,gBAAgB,EAAEL,SAAS,EAAEtD,SAAS,EAAEH,WAAW,EAAEyE,WAAW,EAAEE,cAAc,EAAEM,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}