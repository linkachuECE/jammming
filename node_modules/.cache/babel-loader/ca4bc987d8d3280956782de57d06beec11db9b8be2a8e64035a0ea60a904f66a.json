{"ast":null,"code":"import axios from \"axios\";\nlet apiToken = \"\";\nlet baseApiUrl = \"https://api.spotify.com\";\nexport default function Spotify() {\n  async function requestAccessToken() {\n    const clientID = \"a23843d079a34f28a8368672dc8a7bcd\";\n    const clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\n    const tokenUrl = \"https://accounts.spotify.com/api/token\";\n    let response = await fetch(tokenUrl, {\n      body: `grant_type=client_credentials&client_id=${clientID}&client_secret=${clientSecret}`,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      method: \"POST\"\n    });\n    response = await response.json();\n    let token = response.access_token;\n    apiToken = token;\n  }\n  async function getArtist(artistID) {\n    const baseUrl = baseApiUrl + \"/v1/artists\";\n    let response = await fetch(`${baseUrl}/${artistID}`, {\n      headers: {\n        Authorization: `Bearer  ${apiToken}`\n      }\n    });\n    response = await response.json();\n    console.log(response);\n  }\n  async function getSearchResults(searchQuery) {\n    const baseUrl = baseApiUrl + \"/v1/search\";\n    let queryString = new URLSearchParams({\n      q: searchQuery,\n      type: [\"track\"]\n    });\n    if (!apiToken) {\n      await requestAccessToken();\n    }\n    let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n      headers: {\n        Authorization: `Bearer  ${apiToken}`\n      }\n    });\n    let data = await response.json();\n    return data.tracks.items;\n  }\n  function generateRandomString(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  async function generateCodeChallenge(codeVerifier) {\n    function base64encode(string) {\n      return btoa(String.fromCharCode.apply(null, new Uint8Array(string))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n    }\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return base64encode(digest);\n  }\n  async function authorize(clientId) {\n    const redirectUri = 'http://localhost:3000';\n    let codeVerifier = generateRandomString(128);\n    generateCodeChallenge(codeVerifier).then(codeChallenge => {\n      let state = generateRandomString(16);\n      let scope = 'user-read-private user-read-email';\n      localStorage.setItem('code_verifier', codeVerifier);\n      let args = new URLSearchParams({\n        response_type: 'code',\n        client_id: clientId,\n        scope: scope,\n        redirect_uri: redirectUri,\n        state: state,\n        code_challenge_method: 'S256',\n        code_challenge: codeChallenge\n      });\n      window.location = 'https://accounts.spotify.com/authorize?' + args;\n    });\n  }\n}\n_c = Spotify;\nvar _c;\n$RefreshReg$(_c, \"Spotify\");","map":{"version":3,"names":["axios","apiToken","baseApiUrl","Spotify","requestAccessToken","clientID","clientSecret","tokenUrl","response","fetch","body","headers","method","json","token","access_token","getArtist","artistID","baseUrl","Authorization","console","log","getSearchResults","searchQuery","queryString","URLSearchParams","q","type","toString","data","tracks","items","generateRandomString","length","text","possible","i","charAt","Math","floor","random","generateCodeChallenge","codeVerifier","base64encode","string","btoa","String","fromCharCode","apply","Uint8Array","replace","encoder","TextEncoder","encode","digest","window","crypto","subtle","authorize","clientId","redirectUri","then","codeChallenge","state","scope","localStorage","setItem","args","response_type","client_id","redirect_uri","code_challenge_method","code_challenge","location","_c","$RefreshReg$"],"sources":["/home/linkachu/jammming/src/Spotify.js"],"sourcesContent":["import axios from \"axios\";\n\nlet apiToken = \"\";\nlet baseApiUrl = \"https://api.spotify.com\";\n\nexport default function Spotify(){\n\n    async function requestAccessToken(){\n        const clientID = \"a23843d079a34f28a8368672dc8a7bcd\";\n        const clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\n        const tokenUrl = \"https://accounts.spotify.com/api/token\";\n        \n        let response = await fetch(tokenUrl, {\n        body: `grant_type=client_credentials&client_id=${clientID}&client_secret=${clientSecret}`,\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        method: \"POST\"\n    });\n    response = await response.json();\n    let token = response.access_token;\n    \n    apiToken = token;\n}\n\nasync function getArtist(artistID){\n    const baseUrl = baseApiUrl + \"/v1/artists\";\n\n    let response = await fetch(`${baseUrl}/${artistID}`, {\n        headers: {\n            Authorization: `Bearer  ${apiToken}`\n        }\n    });\n    response = await response.json();\n    console.log(response);\n}\n\nasync function getSearchResults(searchQuery){\n    const baseUrl = baseApiUrl + \"/v1/search\";\n    \n    let queryString = new URLSearchParams({\n        q: searchQuery,\n        type: [\n            \"track\"\n        ]\n    })\n    \n    if (!apiToken){\n        await requestAccessToken();\n    }\n    \n    let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n        headers: {\n            Authorization: `Bearer  ${apiToken}`\n        }\n    });\n    let data = await response.json();\n    \n    return data.tracks.items;\n}\n\nfunction generateRandomString(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    \n    for (let i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n    function base64encode(string) {\n        return btoa(String.fromCharCode.apply(null, new Uint8Array(string)))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n    }\n    \n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    \n    return base64encode(digest);\n}\n\nasync function authorize(clientId){\n    const redirectUri = 'http://localhost:3000';\n    \n    let codeVerifier = generateRandomString(128);\n    \n    generateCodeChallenge(codeVerifier).then(codeChallenge => {\n        let state = generateRandomString(16);\n        let scope = 'user-read-private user-read-email';\n        \n        localStorage.setItem('code_verifier', codeVerifier);\n        \n        let args = new URLSearchParams({\n            response_type: 'code',\n            client_id: clientId,\n            scope: scope,\n            redirect_uri: redirectUri,\n            state: state,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge\n        });\n        \n        window.location = 'https://accounts.spotify.com/authorize?' + args;\n    });\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}