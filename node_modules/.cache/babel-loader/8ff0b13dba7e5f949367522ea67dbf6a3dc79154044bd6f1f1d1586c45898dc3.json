{"ast":null,"code":"export const baseApiUrl = \"https://api.spotify.com\";\nexport const tokenUrl = \"https://accounts.spotify.com/api/token\";\nexport const clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nexport const clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nexport const redirectUri = 'http://localhost:3000';\nexport function generateRandomString(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nexport async function generateCodeChallenge(codeVerifier) {\n  function base64encode(string) {\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(string))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  const encoder = new TextEncoder();\n  const data = encoder.encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return base64encode(digest);\n}\nexport async function authorize() {\n  let codeVerifier = generateRandomString(128);\n  generateCodeChallenge(codeVerifier).then(codeChallenge => {\n    let state = generateRandomString(16);\n    let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n    localStorage.setItem('code_verifier', codeVerifier);\n    let args = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      scope: scope,\n      redirect_uri: redirectUri,\n      state: state,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge\n    });\n    window.location = 'https://accounts.spotify.com/authorize?' + args;\n  });\n}\nexport function checkAuthCode() {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.has('code');\n}\nexport async function getAuthCode() {\n  const urlParams = new URLSearchParams(window.location.search);\n  if (urlParams.has('code')) return urlParams.get('code');else authorize();\n}\nexport function checkAccessToken() {\n  return localStorage.has(\"userDetails\");\n}\nexport async function getAccessToken() {\n  let authCode, codeVerifier;\n  let i = 0;\n  const numTries = 10;\n  while (i++ < numTries) {\n    authCode = getAuthCode();\n    codeVerifier = localStorage.getItem('code_verifier');\n    let body = new URLSearchParams({\n      grant_type: 'authorization_code',\n      code: authCode,\n      redirect_uri: redirectUri,\n      client_id: clientId,\n      code_verifier: codeVerifier\n    });\n    const response = await fetch(tokenUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: body\n    });\n    if (!response.ok) {\n      switch (response.status) {\n        case 400:\n          authorize();\n      }\n      continue;\n    }\n    return await response.json();\n  }\n  console.log(`Attempted to retrieve access token ${numTries} times`);\n}\nexport async function login() {\n  const tokenDetails = await getAccessToken();\n  localStorage.setItem('userDetails', tokenDetails);\n}\nexport function isLoggedIn() {\n  return true;\n}","map":{"version":3,"names":["baseApiUrl","tokenUrl","clientId","clientSecret","redirectUri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","generateCodeChallenge","codeVerifier","base64encode","string","btoa","String","fromCharCode","apply","Uint8Array","replace","encoder","TextEncoder","data","encode","digest","window","crypto","subtle","authorize","then","codeChallenge","state","scope","localStorage","setItem","args","URLSearchParams","response_type","client_id","redirect_uri","code_challenge_method","code_challenge","location","checkAuthCode","urlParams","search","has","getAuthCode","get","checkAccessToken","getAccessToken","authCode","numTries","getItem","body","grant_type","code","code_verifier","response","fetch","method","headers","ok","status","json","console","log","login","tokenDetails","isLoggedIn"],"sources":["/home/linkachu/jammming/src/AuthActions.js"],"sourcesContent":["export const baseApiUrl = \"https://api.spotify.com\";\nexport const tokenUrl = \"https://accounts.spotify.com/api/token\";\nexport const clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nexport const clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nexport const redirectUri = 'http://localhost:3000';\n\n\nexport function generateRandomString(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    \n    for (let i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nexport async function generateCodeChallenge(codeVerifier) {\n    function base64encode(string) {\n        return btoa(String.fromCharCode.apply(null, new Uint8Array(string)))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n    }\n    \n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    \n    return base64encode(digest);\n}\n\nexport async function authorize(){\n    let codeVerifier = generateRandomString(128);\n    \n    generateCodeChallenge(codeVerifier).then(codeChallenge => {\n        let state = generateRandomString(16);\n        let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n        \n        localStorage.setItem('code_verifier', codeVerifier);\n        \n        let args = new URLSearchParams({\n            response_type: 'code',\n            client_id: clientId,\n            scope: scope,\n            redirect_uri: redirectUri,\n            state: state,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge\n        });\n        \n        window.location = 'https://accounts.spotify.com/authorize?' + args;\n    });\n}\n\nexport function checkAuthCode(){\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    return urlParams.has('code');\n}\n\nexport async function getAuthCode(){\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    if (urlParams.has('code'))\n        return urlParams.get('code')\n    else\n        authorize();\n}\n\nexport function checkAccessToken(){\n    return localStorage.has(\"userDetails\");\n}\n\nexport async function getAccessToken(){\n    let authCode, codeVerifier;\n    \n    let i = 0\n    const numTries = 10;\n    while(i++ < numTries){   \n        authCode = getAuthCode();\n        codeVerifier = localStorage.getItem('code_verifier');\n\n        let body = new URLSearchParams({\n            grant_type: 'authorization_code',\n            code: authCode,\n            redirect_uri: redirectUri,\n            client_id: clientId,\n            code_verifier: codeVerifier\n        });\n        \n        const response = await fetch(tokenUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: body\n        })\n\n        if (!response.ok){\n            switch(response.status){\n                case 400:\n                    authorize();\n            }\n\n            continue;\n        }    \n        \n        return await response.json();\n        \n    }\n\n    console.log(`Attempted to retrieve access token ${numTries} times`)\n}\n\nexport async function login(){\n    const tokenDetails = await getAccessToken();\n    localStorage.setItem('userDetails', tokenDetails);\n}\n\nexport function isLoggedIn(){\n    return true;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}