{"ast":null,"code":"var _jsxFileName = \"/home/linkachu/jammming/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport './components/Track/Track';\nimport Track from './components/Track/Track';\nimport Tracklist from './components/Tracklist/Tracklist';\nimport Playlist from './components/Playlist/Playlist';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport SearchResults from './components/SearchResults/SearchResults';\nimport { useEffect, useState } from 'react';\nimport * as Spotify from './Spotify';\nimport * as AuthActions from './AuthActions';\nimport UserProfile from './components/UserProfile/UserProfile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchResults, setSearchResults] = useState([]);\n  const [playlist, setPlaylist] = useState({});\n  const [userInfo, setUserInfo] = useState({});\n  useEffect(() => {\n    // If there is an auth code in the URL, we need to check the access token and request a new one if it isn't valid\n    if (AuthActions.checkAuthCode()) {\n      console.log(\"Auth code checked and found\");\n      if (!AuthActions.checkAccessToken()) {\n        console.log(\"Access token not found, requesting a new one\");\n        AuthActions.getNewAccessToken();\n        console.log(\"Requested a new access token\");\n      } else {\n        AuthActions.testAccessToken().then(tokenValid => {\n          if (!tokenValid) {\n            console.log(\"Access token not found, requesting a new one\");\n            AuthActions.getNewAccessToken();\n            console.log(\"Requested a new access token\");\n          } else {\n            console.log(\"Access token in storage is valid\");\n          }\n        });\n      }\n      // If there is no auth code, check if an access token exists.\n      // If it does and it's valid, do nothing\n      // If it's not valid, delete it\n    } else {\n      console.log(\"Auth code checked and not found\");\n      if (AuthActions.checkAccessToken()) {\n        console.log(\"Found access token, testing...\");\n        AuthActions.testAccessToken().then(tokenValid => {\n          if (!tokenValid) {\n            console.log(\"Access token in local storage not valid, deleting...\");\n            AuthActions.deleteToken();\n            console.log(\"Delete access token\");\n          } else {\n            console.log(\"Access token in storage is valid\");\n          }\n        });\n      }\n    }\n  }, []);\n  function addToPlaylistHandler(track) {\n    if (!playlist.tracks) {\n      setPlaylist(prev => {\n        return {\n          title: prev.title,\n          id: prev.id,\n          tracks: [track]\n        };\n      });\n    } else if (!playlist.tracks.find(currTrack => currTrack.id === track.id)) {\n      setPlaylist(prev => {\n        return {\n          title: prev.title,\n          tracks: [...prev.tracks, track]\n        };\n      });\n    }\n  }\n  function removeFromPlaylistHandler(track) {\n    if (playlist.tracks.find(currTrack => currTrack.id === track.id)) {\n      setPlaylist(prev => {\n        return {\n          title: prev.title,\n          tracks: prev.tracks.filter(currTrack => currTrack.id !== track.id)\n        };\n      });\n    }\n  }\n  function changePlaylistTitleNameHandler(newTitle) {\n    setPlaylist(prev => {\n      return {\n        title: newTitle,\n        tracks: prev.tracks\n      };\n    });\n  }\n  async function searchQueryHandler(query) {\n    if (!query) return;\n    let results = [];\n    results = await Spotify.getSearchResults(query);\n    let newResults = [];\n    if (results.length != 0) {\n      newResults = results.map(result => {\n        return {\n          title: result.name,\n          artist: result.artists[0].name,\n          album: result.album.name,\n          id: result.id,\n          uri: result.uri\n        };\n      });\n    }\n    setSearchResults(newResults);\n  }\n  async function createPlaylistHandler() {\n    if (!playlist || !playlist.tracks || playlist.tracks.length == 0) return;\n    const {\n      id\n    } = await Spotify.createPlaylist(playlist.title);\n    Spotify.addToPlaylist(id, playlist.tracks);\n    setPlaylist({});\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [userInfo && /*#__PURE__*/_jsxDEV(UserProfile, {\n      user: userInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n      title: playlist.title,\n      tracks: playlist.tracks,\n      onRemoveTrack: removeFromPlaylistHandler,\n      onTitleChange: changePlaylistTitleNameHandler,\n      onCreate: createPlaylistHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearchQuery: searchQueryHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      searchResults: searchResults,\n      onAddTrack: addToPlaylistHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"RNC/4lMNBVm29agDuS6uSf3YmS8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Track","Tracklist","Playlist","SearchBar","SearchResults","useEffect","useState","Spotify","AuthActions","UserProfile","jsxDEV","_jsxDEV","App","_s","searchResults","setSearchResults","playlist","setPlaylist","userInfo","setUserInfo","checkAuthCode","console","log","checkAccessToken","getNewAccessToken","testAccessToken","then","tokenValid","deleteToken","addToPlaylistHandler","track","tracks","prev","title","id","find","currTrack","removeFromPlaylistHandler","filter","changePlaylistTitleNameHandler","newTitle","searchQueryHandler","query","results","getSearchResults","newResults","length","map","result","name","artist","artists","album","uri","createPlaylistHandler","createPlaylist","addToPlaylist","className","children","user","fileName","_jsxFileName","lineNumber","columnNumber","onRemoveTrack","onTitleChange","onCreate","onSearchQuery","onAddTrack","_c","$RefreshReg$"],"sources":["/home/linkachu/jammming/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport './components/Track/Track'\nimport Track from './components/Track/Track';\nimport Tracklist from './components/Tracklist/Tracklist';\nimport Playlist from './components/Playlist/Playlist';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport SearchResults from './components/SearchResults/SearchResults';\nimport { useEffect, useState } from 'react';\nimport * as Spotify from './Spotify';\nimport * as AuthActions from './AuthActions'\nimport UserProfile from './components/UserProfile/UserProfile';\n\nfunction App() {\n    const [searchResults, setSearchResults] = useState([]);\n\n    const [playlist, setPlaylist] = useState({});\n\n    const [userInfo, setUserInfo] = useState({});\n\n    useEffect(() => {\n        // If there is an auth code in the URL, we need to check the access token and request a new one if it isn't valid\n        if(AuthActions.checkAuthCode()){\n            console.log(\"Auth code checked and found\");\n\n            if(!AuthActions.checkAccessToken()){\n                console.log(\"Access token not found, requesting a new one\");\n\n                AuthActions.getNewAccessToken();\n\n                console.log(\"Requested a new access token\");\n            } else {\n                AuthActions.testAccessToken()\n                .then((tokenValid) => {\n                    if(!tokenValid){\n                        console.log(\"Access token not found, requesting a new one\");\n\n                        AuthActions.getNewAccessToken();\n\n                        console.log(\"Requested a new access token\");\n                    } else {\n                        console.log(\"Access token in storage is valid\");\n                    }\n                })\n            }\n        // If there is no auth code, check if an access token exists.\n        // If it does and it's valid, do nothing\n        // If it's not valid, delete it\n        } else {\n            console.log(\"Auth code checked and not found\");\n            if(AuthActions.checkAccessToken()){\n                console.log(\"Found access token, testing...\")\n                AuthActions.testAccessToken()\n                .then((tokenValid) => {\n                    if(!tokenValid){\n                        console.log(\"Access token in local storage not valid, deleting...\")\n                        AuthActions.deleteToken();\n                        console.log(\"Delete access token\");\n                    } else {\n                        console.log(\"Access token in storage is valid\");\n                    }\n                })\n            }\n        }\n\n    }, []);\n\n    function addToPlaylistHandler(track){\n        if(!playlist.tracks){\n            setPlaylist((prev) => {\n                return {\n                    title: prev.title,\n                    id: prev.id,\n                    tracks: [\n                        track\n                    ]\n                }\n            })\n        }\n        else if(!playlist.tracks.find((currTrack) => currTrack.id === track.id)){\n            setPlaylist((prev) =>{\n                return {\n                    title: prev.title,\n                    tracks: [\n                        ...prev.tracks,\n                        track\n                    ]\n                }\n            }\n        )}\n    }\n\n    function removeFromPlaylistHandler(track){\n        if(playlist.tracks.find((currTrack) => currTrack.id === track.id)){\n            setPlaylist((prev) => {\n                return {\n                    title: prev.title,\n                    tracks: prev.tracks.filter((currTrack) => currTrack.id !== track.id)\n                }\n            })\n        }\n    }\n\n    function changePlaylistTitleNameHandler(newTitle){\n        setPlaylist((prev) => {\n            return {\n                title: newTitle,\n                tracks: prev.tracks\n            }\n        })\n    }\n\n    async function searchQueryHandler(query){\n        if(!query)\n            return;\n\n        let results = [];\n        results = await Spotify.getSearchResults(query);\n\n        let newResults = [];\n\n        if(results.length != 0){\n            newResults = results.map(result => {\n                return {\n                    title: result.name,\n                    artist: result.artists[0].name,\n                    album: result.album.name,\n                    id: result.id,\n                    uri: result.uri\n                }\n            });\n        }\n            \n        setSearchResults(newResults);\n    }\n\n    async function createPlaylistHandler(){\n        if(!playlist || !playlist.tracks || playlist.tracks.length == 0)\n            return;\n\n        const {id} = await Spotify.createPlaylist(playlist.title);\n\n        Spotify.addToPlaylist(id, playlist.tracks);\n\n        setPlaylist({});\n    }\n\n    return (\n        <div className=\"App\">\n            { userInfo && <UserProfile user={userInfo} /> }\n            <Playlist title={playlist.title} tracks={playlist.tracks} onRemoveTrack={removeFromPlaylistHandler} onTitleChange={changePlaylistTitleNameHandler} onCreate={createPlaylistHandler} />\n            <SearchBar onSearchQuery={searchQueryHandler} />\n            <SearchResults searchResults={searchResults} onAddTrack={addToPlaylistHandler} />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}