{"ast":null,"code":"import axios from \"axios\";\nconst baseApiUrl = \"https://api.spotify.com\";\nconst tokenUrl = \"https://accounts.spotify.com/api/token\";\nconst clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nconst clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nconst redirectUri = 'http://localhost:3000';\nasync function requestAccessToken() {\n  if (!localStorage.getItem(\"authCode\")) return;\n  let codeVerifier = localStorage.getItem('code_verifier');\n  let authCode = localStorage.getItem(\"authCode\");\n  let body = new URLSearchParams({\n    grant_type: 'authorization_code',\n    code: authCode,\n    redirect_uri: redirectUri,\n    client_id: clientId,\n    code_verifier: codeVerifier\n  });\n  const response = fetch(tokenUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: body\n  }).then(response => {\n    if (!response.ok) throw new Error('HTTP status' + response.status);\n    return response.json();\n  }).then(data => {\n    localStorage.setItem('accessToken', data.access_token);\n  }).catch(error => {\n    console.log(error);\n  });\n}\nasync function getArtist(artistID) {\n  const accessToken = localStorage.getItem('accessToken');\n  const baseUrl = baseApiUrl + \"/v1/artists\";\n  let response = await fetch(`${baseUrl}/${artistID}`, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  response = await response.json();\n}\nasync function getSearchResults(searchQuery) {\n  const baseUrl = baseApiUrl + \"/v1/search\";\n  let queryString = new URLSearchParams({\n    q: searchQuery,\n    type: [\"track\"]\n  });\n  if (!localStorage.getItem(\"accessToken\")) await requestAccessToken();\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let response;\n  let data;\n  fetch(`${baseUrl}?${queryString.toString()}`, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  }).then(response => response.json()).then(data => {\n    return data;\n  }).catch(e => console.log(e));\n}\nasync function getUserInfo() {\n  const baseUrl = baseApiUrl + \"/v1/me\";\n  if (!localStorage.getItem(\"accessToken\")) await requestAccessToken();\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let response = await fetch(baseUrl, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  let data = await response.json();\n  localStorage.setItem(\"userId\", data.id);\n  return data;\n}\nfunction generateRandomString(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nasync function generateCodeChallenge(codeVerifier) {\n  function base64encode(string) {\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(string))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  const encoder = new TextEncoder();\n  const data = encoder.encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return base64encode(digest);\n}\nasync function authorize() {\n  let codeVerifier = generateRandomString(128);\n  generateCodeChallenge(codeVerifier).then(codeChallenge => {\n    let state = generateRandomString(16);\n    let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n    localStorage.setItem('code_verifier', codeVerifier);\n    let args = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      scope: scope,\n      redirect_uri: redirectUri,\n      state: state,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge\n    });\n    window.location = 'https://accounts.spotify.com/authorize?' + args;\n  });\n}\nfunction setAuthCode() {\n  const urlParams = new URLSearchParams(window.location.search);\n  if (urlParams.has('code')) localStorage.setItem(\"authCode\", urlParams.get('code'));\n}\nasync function createPlaylist(title) {\n  if (!localStorage.getItem(\"userId\")) await getUserInfo();\n  const userId = localStorage.getItem(\"userId\");\n  const baseUrl = `${baseApiUrl}/v1/users/${userId}/playlists`;\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let body = {\n    name: title\n  };\n  let response = await fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer  ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  let data = await response.json();\n  return data;\n}\nasync function addToPlaylist(playlistId, tracks) {\n  if (!tracks) return;\n  const baseUrl = `${baseApiUrl}/v1/playlists/${playlistId}/tracks`;\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let body = {\n    uris: tracks.map(track => track.uri)\n  };\n  let response = await fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer  ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  let data = await response.json();\n  return data;\n}\nexport { requestAccessToken, getSearchResults, getArtist, authorize, setAuthCode, getUserInfo, createPlaylist, addToPlaylist };","map":{"version":3,"names":["axios","baseApiUrl","tokenUrl","clientId","clientSecret","redirectUri","requestAccessToken","localStorage","getItem","codeVerifier","authCode","body","URLSearchParams","grant_type","code","redirect_uri","client_id","code_verifier","response","fetch","method","headers","then","ok","Error","status","json","data","setItem","access_token","catch","error","console","log","getArtist","artistID","accessToken","baseUrl","Authorization","getSearchResults","searchQuery","queryString","q","type","toString","e","getUserInfo","id","generateRandomString","length","text","possible","i","charAt","Math","floor","random","generateCodeChallenge","base64encode","string","btoa","String","fromCharCode","apply","Uint8Array","replace","encoder","TextEncoder","encode","digest","window","crypto","subtle","authorize","codeChallenge","state","scope","args","response_type","code_challenge_method","code_challenge","location","setAuthCode","urlParams","search","has","get","createPlaylist","title","userId","name","JSON","stringify","addToPlaylist","playlistId","tracks","uris","map","track","uri"],"sources":["/home/linkachu/jammming/src/Spotify.js"],"sourcesContent":["import axios from \"axios\";\n\nconst baseApiUrl = \"https://api.spotify.com\";\nconst tokenUrl = \"https://accounts.spotify.com/api/token\";\nconst clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nconst clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nconst redirectUri = 'http://localhost:3000';\n\nasync function requestAccessToken(){\n    if(!localStorage.getItem(\"authCode\"))\n        return;\n\n    let codeVerifier = localStorage.getItem('code_verifier');\n    let authCode = localStorage.getItem(\"authCode\");\n\n    let body = new URLSearchParams({\n        grant_type: 'authorization_code',\n        code: authCode,\n        redirect_uri: redirectUri,\n        client_id: clientId,\n        code_verifier: codeVerifier\n    });\n\n    const response = fetch(tokenUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: body\n    })\n    .then(response => {\n      if(!response.ok)\n        throw new Error('HTTP status' + response.status);\n    \n        return response.json();\n    })\n    .then(data => {\n        localStorage.setItem('accessToken', data.access_token)\n    }).catch(error =>{\n        console.log(error);\n    }\n    );\n}\n\nasync function getArtist(artistID){\n    const accessToken = localStorage.getItem('accessToken')\n    const baseUrl = baseApiUrl + \"/v1/artists\";\n\n    let response = await fetch(`${baseUrl}/${artistID}`, {\n        headers: {\n            Authorization: `Bearer  ${accessToken}`\n        }\n    });\n    response = await response.json();\n}\n\nasync function getSearchResults(searchQuery){\n    const baseUrl = baseApiUrl + \"/v1/search\";\n\n    let queryString = new URLSearchParams({\n        q: searchQuery,\n        type: [\n            \"track\"\n        ]\n    })\n\n    if (!localStorage.getItem(\"accessToken\"))\n        await requestAccessToken();\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let response;\n    let data;\n\n    fetch(`${baseUrl}?${queryString.toString()}`, {\n            headers: {\n                Authorization: `Bearer  ${accessToken}`\n            }\n    })\n    .then(response => response.json())\n    .then(data => {\n        return data;\n        }\n    ).catch(e => console.log(e))\n}\n\nasync function getUserInfo(){\n    const baseUrl = baseApiUrl + \"/v1/me\";\n\n    if (!localStorage.getItem(\"accessToken\"))\n        await requestAccessToken();\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n    \n    let response = await fetch(baseUrl, {\n        headers: {\n          Authorization: `Bearer  ${accessToken}`\n        }\n    });\n\n    let data = await response.json();\n\n    localStorage.setItem(\"userId\", data.id)\n\n    return data;\n}\n\nfunction generateRandomString(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  \n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n    function base64encode(string) {\n      return btoa(String.fromCharCode.apply(null, new Uint8Array(string)))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n    }\n  \n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n  \n    return base64encode(digest);\n}\n\nasync function authorize(){\n    let codeVerifier = generateRandomString(128);\n    \n    generateCodeChallenge(codeVerifier).then(codeChallenge => {\n        let state = generateRandomString(16);\n        let scope = 'user-read-private user-read-email playlist-modify-private playlist-modify-public';\n\n        localStorage.setItem('code_verifier', codeVerifier);\n\n        let args = new URLSearchParams({\n            response_type: 'code',\n            client_id: clientId,\n            scope: scope,\n            redirect_uri: redirectUri,\n            state: state,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge\n        });\n\n        window.location = 'https://accounts.spotify.com/authorize?' + args;\n    });\n}\n\nfunction setAuthCode(){\n    const urlParams = new URLSearchParams(window.location.search);\n\n    if (urlParams.has('code'))\n      localStorage.setItem(\"authCode\", urlParams.get('code'));\n}\n\nasync function createPlaylist(title){\n    if(!localStorage.getItem(\"userId\"))\n        await getUserInfo();\n\n    const userId = localStorage.getItem(\"userId\");\n    const baseUrl = `${baseApiUrl}/v1/users/${userId}/playlists`;\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let body = {\n        name: title\n    };\n\n    let response = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer  ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n\n    let data = await response.json();\n\n    return data;\n}\n\nasync function addToPlaylist(playlistId, tracks){\n    if(!tracks)\n        return;\n\n    const baseUrl = `${baseApiUrl}/v1/playlists/${playlistId}/tracks`;\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let body = {\n        uris: tracks.map((track) => track.uri)\n    };\n\n    let response = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer  ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n\n    let data = await response.json();\n\n    return data;\n}\n\nexport {requestAccessToken, getSearchResults, getArtist, authorize, setAuthCode, getUserInfo, createPlaylist, addToPlaylist};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}