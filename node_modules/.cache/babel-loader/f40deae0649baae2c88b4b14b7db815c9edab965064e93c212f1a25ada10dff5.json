{"ast":null,"code":"import axios from \"axios\";\nconst baseApiUrl = \"https://api.spotify.com\";\nconst tokenUrl = \"https://accounts.spotify.com/api/token\";\nconst clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nconst clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nconst redirectUri = 'http://localhost:3000';\nasync function requestAccessToken() {\n  if (!localStorage.has(\"authCode\")) return;\n  let codeVerifier = localStorage.getItem('code_verifier');\n  let authCode = localStorage.getItem(\"authCode\");\n  let body = new URLSearchParams({\n    grant_type: 'authorization_code',\n    code: authCode,\n    redirect_uri: redirectUri,\n    client_id: clientId,\n    code_verifier: codeVerifier\n  });\n  const response = fetch(tokenUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: body\n  }).then(response => {\n    if (!response.ok) throw new Error('HTTP status' + response.status);\n    return response.json();\n  }).then(data => {\n    localStorage.setItem('accessToken', data.access_token);\n  });\n  accessToken = token;\n}\nasync function getArtist(artistID) {\n  const baseUrl = baseApiUrl + \"/v1/artists\";\n  let response = await fetch(`${baseUrl}/${artistID}`, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  response = await response.json();\n  console.log(response);\n}\nasync function getSearchResults(searchQuery) {\n  const baseUrl = baseApiUrl + \"/v1/search\";\n  let queryString = new URLSearchParams({\n    q: searchQuery,\n    type: [\"track\"]\n  });\n  if (!accessToken) {\n    await requestAccessToken();\n  }\n  let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  let data = await response.json();\n  return data.tracks.items;\n}\nfunction generateRandomString(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nasync function generateCodeChallenge(codeVerifier) {\n  function base64encode(string) {\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(string))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  const encoder = new TextEncoder();\n  const data = encoder.encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return base64encode(digest);\n}\nasync function authorize() {\n  let codeVerifier = generateRandomString(128);\n  generateCodeChallenge(codeVerifier).then(codeChallenge => {\n    let state = generateRandomString(16);\n    let scope = 'user-read-private user-read-email';\n    localStorage.setItem('code_verifier', codeVerifier);\n    let args = new URLSearchParams({\n      response_type: 'code',\n      client_id: clientId,\n      scope: scope,\n      redirect_uri: redirectUri,\n      state: state,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge\n    });\n    window.location = 'https://accounts.spotify.com/authorize?' + args;\n  });\n}\nfunction setAuthCode() {\n  const urlParams = new URLSearchParams(window.location.search);\n  if (urlParams.has('code')) localStorage.setItem(\"authCode\", urlParams.get('code'));\n}\nexport { requestAccessToken, getSearchResults, getArtist, authorize, setAuthCode };","map":{"version":3,"names":["axios","baseApiUrl","tokenUrl","clientId","clientSecret","redirectUri","requestAccessToken","localStorage","has","codeVerifier","getItem","authCode","body","URLSearchParams","grant_type","code","redirect_uri","client_id","code_verifier","response","fetch","method","headers","then","ok","Error","status","json","data","setItem","access_token","accessToken","token","getArtist","artistID","baseUrl","Authorization","console","log","getSearchResults","searchQuery","queryString","q","type","toString","tracks","items","generateRandomString","length","text","possible","i","charAt","Math","floor","random","generateCodeChallenge","base64encode","string","btoa","String","fromCharCode","apply","Uint8Array","replace","encoder","TextEncoder","encode","digest","window","crypto","subtle","authorize","codeChallenge","state","scope","args","response_type","code_challenge_method","code_challenge","location","setAuthCode","urlParams","search","get"],"sources":["/home/linkachu/jammming/src/Spotify.js"],"sourcesContent":["import axios from \"axios\";\n\nconst baseApiUrl = \"https://api.spotify.com\";\nconst tokenUrl = \"https://accounts.spotify.com/api/token\";\nconst clientId = \"a23843d079a34f28a8368672dc8a7bcd\";\nconst clientSecret = \"d98f121afd3b4d9babc64ce90f4d35f2\";\nconst redirectUri = 'http://localhost:3000';\n\nasync function requestAccessToken(){\n    if(!localStorage.has(\"authCode\"))\n        return;\n\n    let codeVerifier = localStorage.getItem('code_verifier');\n    let authCode = localStorage.getItem(\"authCode\");\n\n    let body = new URLSearchParams({\n        grant_type: 'authorization_code',\n        code: authCode,\n        redirect_uri: redirectUri,\n        client_id: clientId,\n        code_verifier: codeVerifier\n    });\n\n    const response = fetch(tokenUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: body\n    })\n    .then(response => {\n      if(!response.ok)\n        throw new Error('HTTP status' + response.status);\n    \n        return response.json();\n    })\n    .then(data => {\n        localStorage.setItem('accessToken', data.access_token)\n    });\n\n    accessToken = token;\n}\n\nasync function getArtist(artistID){\n    const baseUrl = baseApiUrl + \"/v1/artists\";\n\n    let response = await fetch(`${baseUrl}/${artistID}`, {\n        headers: {\n            Authorization: `Bearer  ${accessToken}`\n        }\n    });\n    response = await response.json();\n    console.log(response);\n}\n\nasync function getSearchResults(searchQuery){\n    const baseUrl = baseApiUrl + \"/v1/search\";\n\n    let queryString = new URLSearchParams({\n        q: searchQuery,\n        type: [\n            \"track\"\n        ]\n    })\n\n    if (!accessToken){\n        await requestAccessToken();\n    }\n\n    let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n        headers: {\n          Authorization: `Bearer  ${accessToken}`\n        }\n    });\n    let data = await response.json();\n\n    return data.tracks.items;\n}\n\nfunction generateRandomString(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  \n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n    function base64encode(string) {\n      return btoa(String.fromCharCode.apply(null, new Uint8Array(string)))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n    }\n  \n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n  \n    return base64encode(digest);\n}\n\nasync function authorize(){\n    let codeVerifier = generateRandomString(128);\n    \n    generateCodeChallenge(codeVerifier).then(codeChallenge => {\n        let state = generateRandomString(16);\n        let scope = 'user-read-private user-read-email';\n\n        localStorage.setItem('code_verifier', codeVerifier);\n\n        let args = new URLSearchParams({\n            response_type: 'code',\n            client_id: clientId,\n            scope: scope,\n            redirect_uri: redirectUri,\n            state: state,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge\n        });\n\n        window.location = 'https://accounts.spotify.com/authorize?' + args;\n    });\n}\n\nfunction setAuthCode(){\n    const urlParams = new URLSearchParams(window.location.search);\n\n    if (urlParams.has('code'))\n      localStorage.setItem(\"authCode\", urlParams.get('code'));\n}\n\nexport {requestAccessToken, getSearchResults, getArtist, authorize, setAuthCode};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}