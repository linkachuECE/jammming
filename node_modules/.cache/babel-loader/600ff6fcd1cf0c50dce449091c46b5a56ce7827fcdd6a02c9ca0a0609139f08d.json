{"ast":null,"code":"import * as AuthActions from './AuthActions';\nexport async function getArtist(artistID) {\n  const accessToken = localStorage.getItem('accessToken');\n  const baseUrl = AuthActions.baseApiUrl + \"/v1/artists\";\n  let response = await fetch(`${baseUrl}/${artistID}`, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  response = await response.json();\n}\nexport async function getSearchResults(searchQuery) {\n  const baseUrl = AuthActions.baseApiUrl + \"/v1/search\";\n  let queryString = new URLSearchParams({\n    q: searchQuery,\n    type: [\"track\"]\n  });\n  if (!localStorage.getItem(\"tokenDetails\")) await AuthActions.getNewAccessToken();\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let i = 0;\n  while (i++ < 10) {\n    let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n      headers: {\n        Authorization: `Bearer  ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      switch (response.status) {\n        case 401:\n          await AuthActions.getNewAccessToken();\n          continue;\n      }\n    }\n    let data = await response.json();\n    return data.tracks.items;\n  }\n}\nexport async function getUserInfo() {\n  const baseUrl = AuthActions.baseApiUrl + \"/v1/me\";\n  if (!localStorage.getItem(\"tokenDetails\")) await AuthActions.getNewAccessToken();\n  const tokenDetails = localStorage.getItem(\"tokenDetails\");\n  const accessToken = tokenDetails.access_token;\n  let response = await fetch(baseUrl, {\n    headers: {\n      Authorization: `Bearer  ${accessToken}`\n    }\n  });\n  while (true) {\n    if (!response.ok && response.status == 401) {\n      console.log(\"Bad access token\");\n      await AuthActions.getNewAccessToken();\n    }\n    let data = await response.json();\n    localStorage.setItem(\"userId\", data.id);\n    return data;\n  }\n}\nexport async function createPlaylist(title) {\n  if (!localStorage.getItem(\"userId\")) await getUserInfo();\n  const userId = localStorage.getItem(\"userId\");\n  const baseUrl = `${AuthActions.baseApiUrl}/v1/users/${userId}/playlists`;\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let body = {\n    name: title\n  };\n  let response = await fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer  ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  let data = await response.json();\n  return data;\n}\nexport async function addToPlaylist(playlistId, tracks) {\n  if (!tracks) return;\n  const baseUrl = `${AuthActions.baseApiUrl}/v1/playlists/${playlistId}/tracks`;\n  const accessToken = localStorage.getItem(\"accessToken\");\n  let body = {\n    uris: tracks.map(track => track.uri)\n  };\n  let response = await fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer  ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  let data = await response.json();\n  return data;\n}","map":{"version":3,"names":["AuthActions","getArtist","artistID","accessToken","localStorage","getItem","baseUrl","baseApiUrl","response","fetch","headers","Authorization","json","getSearchResults","searchQuery","queryString","URLSearchParams","q","type","getNewAccessToken","i","toString","ok","status","data","tracks","items","getUserInfo","tokenDetails","access_token","console","log","setItem","id","createPlaylist","title","userId","body","name","method","JSON","stringify","addToPlaylist","playlistId","uris","map","track","uri"],"sources":["/home/linkachu/jammming/src/Spotify.js"],"sourcesContent":["import * as AuthActions from './AuthActions'\n\nexport async function getArtist(artistID){\n    const accessToken = localStorage.getItem('accessToken')\n    const baseUrl = AuthActions.baseApiUrl + \"/v1/artists\";\n\n    let response = await fetch(`${baseUrl}/${artistID}`, {\n        headers: {\n            Authorization: `Bearer  ${accessToken}`\n        }\n    });\n    response = await response.json();\n}\n\nexport async function getSearchResults(searchQuery){\n    const baseUrl = AuthActions.baseApiUrl + \"/v1/search\";\n\n    let queryString = new URLSearchParams({\n        q: searchQuery,\n        type: [\n            \"track\"\n        ]\n    })\n\n    if (!localStorage.getItem(\"tokenDetails\"))\n        await AuthActions.getNewAccessToken();\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let i = 0\n    while (i++ < 10){\n        let response = await fetch(`${baseUrl}?${queryString.toString()}`, {\n            headers: {\n                Authorization: `Bearer  ${accessToken}`\n            }\n        });\n\n        if(!response.ok){\n            switch(response.status){\n                case 401:\n                    await AuthActions.getNewAccessToken();\n                    continue;\n            }\n\n        }\n        \n        let data = await response.json();\n        return data.tracks.items;\n        \n    }\n}\n\nexport async function getUserInfo(){\n    const baseUrl = AuthActions.baseApiUrl + \"/v1/me\";\n\n    if (!localStorage.getItem(\"tokenDetails\"))\n        await AuthActions.getNewAccessToken();\n\n    const tokenDetails = localStorage.getItem(\"tokenDetails\");\n    const accessToken = tokenDetails.access_token;\n    \n    let response = await fetch(baseUrl, {\n        headers: {\n          Authorization: `Bearer  ${accessToken}`\n        }\n    });\n\n    while (true){\n        if(!response.ok && response.status == 401){\n            console.log(\"Bad access token\");\n            await AuthActions.getNewAccessToken();\n        }\n        \n        let data = await response.json();\n        \n        localStorage.setItem(\"userId\", data.id)\n        \n        return data;\n    }\n}\n\nexport async function createPlaylist(title){\n    if(!localStorage.getItem(\"userId\"))\n        await getUserInfo();\n\n    const userId = localStorage.getItem(\"userId\");\n    const baseUrl = `${AuthActions.baseApiUrl}/v1/users/${userId}/playlists`;\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let body = {\n        name: title\n    };\n\n    let response = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer  ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n\n    let data = await response.json();\n\n    return data;\n}\n\nexport async function addToPlaylist(playlistId, tracks){\n    if(!tracks)\n        return;\n\n    const baseUrl = `${AuthActions.baseApiUrl}/v1/playlists/${playlistId}/tracks`;\n\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    let body = {\n        uris: tracks.map((track) => track.uri)\n    };\n\n    let response = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer  ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n\n    let data = await response.json();\n\n    return data;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}